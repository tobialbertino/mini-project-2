// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entity "miniProject2/internal/customer/model/entity"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// CustomerRepository is an autogenerated mock type for the CustomerRepository type
type CustomerRepository struct {
	mock.Mock
}

type CustomerRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CustomerRepository) EXPECT() *CustomerRepository_Expecter {
	return &CustomerRepository_Expecter{mock: &_m.Mock}
}

// CreateCustomer provides a mock function with given fields: tx, et
func (_m *CustomerRepository) CreateCustomer(tx *sql.Tx, et entity.Customer) (int64, error) {
	ret := _m.Called(tx, et)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.Customer) (int64, error)); ok {
		return rf(tx, et)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.Customer) int64); ok {
		r0 = rf(tx, et)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, entity.Customer) error); ok {
		r1 = rf(tx, et)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerRepository_CreateCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomer'
type CustomerRepository_CreateCustomer_Call struct {
	*mock.Call
}

// CreateCustomer is a helper method to define mock.On call
//   - tx *sql.Tx
//   - et entity.Customer
func (_e *CustomerRepository_Expecter) CreateCustomer(tx interface{}, et interface{}) *CustomerRepository_CreateCustomer_Call {
	return &CustomerRepository_CreateCustomer_Call{Call: _e.mock.On("CreateCustomer", tx, et)}
}

func (_c *CustomerRepository_CreateCustomer_Call) Run(run func(tx *sql.Tx, et entity.Customer)) *CustomerRepository_CreateCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Tx), args[1].(entity.Customer))
	})
	return _c
}

func (_c *CustomerRepository_CreateCustomer_Call) Return(_a0 int64, _a1 error) *CustomerRepository_CreateCustomer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerRepository_CreateCustomer_Call) RunAndReturn(run func(*sql.Tx, entity.Customer) (int64, error)) *CustomerRepository_CreateCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCustomerByID provides a mock function with given fields: tx, et
func (_m *CustomerRepository) DeleteCustomerByID(tx *sql.Tx, et entity.Customer) (int64, error) {
	ret := _m.Called(tx, et)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.Customer) (int64, error)); ok {
		return rf(tx, et)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.Customer) int64); ok {
		r0 = rf(tx, et)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, entity.Customer) error); ok {
		r1 = rf(tx, et)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerRepository_DeleteCustomerByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomerByID'
type CustomerRepository_DeleteCustomerByID_Call struct {
	*mock.Call
}

// DeleteCustomerByID is a helper method to define mock.On call
//   - tx *sql.Tx
//   - et entity.Customer
func (_e *CustomerRepository_Expecter) DeleteCustomerByID(tx interface{}, et interface{}) *CustomerRepository_DeleteCustomerByID_Call {
	return &CustomerRepository_DeleteCustomerByID_Call{Call: _e.mock.On("DeleteCustomerByID", tx, et)}
}

func (_c *CustomerRepository_DeleteCustomerByID_Call) Run(run func(tx *sql.Tx, et entity.Customer)) *CustomerRepository_DeleteCustomerByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Tx), args[1].(entity.Customer))
	})
	return _c
}

func (_c *CustomerRepository_DeleteCustomerByID_Call) Return(_a0 int64, _a1 error) *CustomerRepository_DeleteCustomerByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerRepository_DeleteCustomerByID_Call) RunAndReturn(run func(*sql.Tx, entity.Customer) (int64, error)) *CustomerRepository_DeleteCustomerByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCustomer provides a mock function with given fields: tx, et, etPaging
func (_m *CustomerRepository) GetAllCustomer(tx *sql.DB, et entity.Customer, etPaging entity.Pagination) ([]entity.Customer, error) {
	ret := _m.Called(tx, et, etPaging)

	var r0 []entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.DB, entity.Customer, entity.Pagination) ([]entity.Customer, error)); ok {
		return rf(tx, et, etPaging)
	}
	if rf, ok := ret.Get(0).(func(*sql.DB, entity.Customer, entity.Pagination) []entity.Customer); ok {
		r0 = rf(tx, et, etPaging)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.DB, entity.Customer, entity.Pagination) error); ok {
		r1 = rf(tx, et, etPaging)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerRepository_GetAllCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCustomer'
type CustomerRepository_GetAllCustomer_Call struct {
	*mock.Call
}

// GetAllCustomer is a helper method to define mock.On call
//   - tx *sql.DB
//   - et entity.Customer
//   - etPaging entity.Pagination
func (_e *CustomerRepository_Expecter) GetAllCustomer(tx interface{}, et interface{}, etPaging interface{}) *CustomerRepository_GetAllCustomer_Call {
	return &CustomerRepository_GetAllCustomer_Call{Call: _e.mock.On("GetAllCustomer", tx, et, etPaging)}
}

func (_c *CustomerRepository_GetAllCustomer_Call) Run(run func(tx *sql.DB, et entity.Customer, etPaging entity.Pagination)) *CustomerRepository_GetAllCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.DB), args[1].(entity.Customer), args[2].(entity.Pagination))
	})
	return _c
}

func (_c *CustomerRepository_GetAllCustomer_Call) Return(_a0 []entity.Customer, _a1 error) *CustomerRepository_GetAllCustomer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerRepository_GetAllCustomer_Call) RunAndReturn(run func(*sql.DB, entity.Customer, entity.Pagination) ([]entity.Customer, error)) *CustomerRepository_GetAllCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomerByID provides a mock function with given fields: tx, et
func (_m *CustomerRepository) GetCustomerByID(tx *sql.Tx, et entity.Customer) (entity.Customer, error) {
	ret := _m.Called(tx, et)

	var r0 entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.Customer) (entity.Customer, error)); ok {
		return rf(tx, et)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.Customer) entity.Customer); ok {
		r0 = rf(tx, et)
	} else {
		r0 = ret.Get(0).(entity.Customer)
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, entity.Customer) error); ok {
		r1 = rf(tx, et)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerRepository_GetCustomerByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomerByID'
type CustomerRepository_GetCustomerByID_Call struct {
	*mock.Call
}

// GetCustomerByID is a helper method to define mock.On call
//   - tx *sql.Tx
//   - et entity.Customer
func (_e *CustomerRepository_Expecter) GetCustomerByID(tx interface{}, et interface{}) *CustomerRepository_GetCustomerByID_Call {
	return &CustomerRepository_GetCustomerByID_Call{Call: _e.mock.On("GetCustomerByID", tx, et)}
}

func (_c *CustomerRepository_GetCustomerByID_Call) Run(run func(tx *sql.Tx, et entity.Customer)) *CustomerRepository_GetCustomerByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Tx), args[1].(entity.Customer))
	})
	return _c
}

func (_c *CustomerRepository_GetCustomerByID_Call) Return(_a0 entity.Customer, _a1 error) *CustomerRepository_GetCustomerByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerRepository_GetCustomerByID_Call) RunAndReturn(run func(*sql.Tx, entity.Customer) (entity.Customer, error)) *CustomerRepository_GetCustomerByID_Call {
	_c.Call.Return(run)
	return _c
}

// Pagination provides a mock function with given fields: tx, et
func (_m *CustomerRepository) Pagination(tx *sql.DB, et entity.Pagination) (entity.Pagination, error) {
	ret := _m.Called(tx, et)

	var r0 entity.Pagination
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.DB, entity.Pagination) (entity.Pagination, error)); ok {
		return rf(tx, et)
	}
	if rf, ok := ret.Get(0).(func(*sql.DB, entity.Pagination) entity.Pagination); ok {
		r0 = rf(tx, et)
	} else {
		r0 = ret.Get(0).(entity.Pagination)
	}

	if rf, ok := ret.Get(1).(func(*sql.DB, entity.Pagination) error); ok {
		r1 = rf(tx, et)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerRepository_Pagination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pagination'
type CustomerRepository_Pagination_Call struct {
	*mock.Call
}

// Pagination is a helper method to define mock.On call
//   - tx *sql.DB
//   - et entity.Pagination
func (_e *CustomerRepository_Expecter) Pagination(tx interface{}, et interface{}) *CustomerRepository_Pagination_Call {
	return &CustomerRepository_Pagination_Call{Call: _e.mock.On("Pagination", tx, et)}
}

func (_c *CustomerRepository_Pagination_Call) Run(run func(tx *sql.DB, et entity.Pagination)) *CustomerRepository_Pagination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.DB), args[1].(entity.Pagination))
	})
	return _c
}

func (_c *CustomerRepository_Pagination_Call) Return(_a0 entity.Pagination, _a1 error) *CustomerRepository_Pagination_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerRepository_Pagination_Call) RunAndReturn(run func(*sql.DB, entity.Pagination) (entity.Pagination, error)) *CustomerRepository_Pagination_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCustomerByID provides a mock function with given fields: tx, et
func (_m *CustomerRepository) UpdateCustomerByID(tx *sql.Tx, et entity.Customer) (int64, error) {
	ret := _m.Called(tx, et)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.Customer) (int64, error)); ok {
		return rf(tx, et)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.Customer) int64); ok {
		r0 = rf(tx, et)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, entity.Customer) error); ok {
		r1 = rf(tx, et)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerRepository_UpdateCustomerByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCustomerByID'
type CustomerRepository_UpdateCustomerByID_Call struct {
	*mock.Call
}

// UpdateCustomerByID is a helper method to define mock.On call
//   - tx *sql.Tx
//   - et entity.Customer
func (_e *CustomerRepository_Expecter) UpdateCustomerByID(tx interface{}, et interface{}) *CustomerRepository_UpdateCustomerByID_Call {
	return &CustomerRepository_UpdateCustomerByID_Call{Call: _e.mock.On("UpdateCustomerByID", tx, et)}
}

func (_c *CustomerRepository_UpdateCustomerByID_Call) Run(run func(tx *sql.Tx, et entity.Customer)) *CustomerRepository_UpdateCustomerByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Tx), args[1].(entity.Customer))
	})
	return _c
}

func (_c *CustomerRepository_UpdateCustomerByID_Call) Return(_a0 int64, _a1 error) *CustomerRepository_UpdateCustomerByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerRepository_UpdateCustomerByID_Call) RunAndReturn(run func(*sql.Tx, entity.Customer) (int64, error)) *CustomerRepository_UpdateCustomerByID_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCustomerRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustomerRepository creates a new instance of CustomerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomerRepository(t mockConstructorTestingTNewCustomerRepository) *CustomerRepository {
	mock := &CustomerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
