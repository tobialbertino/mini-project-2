// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entity "miniProject2/modules/account/model/entity"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// AccountRepository is an autogenerated mock type for the AccountRepository type
type AccountRepository struct {
	mock.Mock
}

type AccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountRepository) EXPECT() *AccountRepository_Expecter {
	return &AccountRepository_Expecter{mock: &_m.Mock}
}

// AddActor provides a mock function with given fields: tx, actor
func (_m *AccountRepository) AddActor(tx *sql.Tx, actor entity.Actor) (int64, error) {
	ret := _m.Called(tx, actor)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.Actor) (int64, error)); ok {
		return rf(tx, actor)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.Actor) int64); ok {
		r0 = rf(tx, actor)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, entity.Actor) error); ok {
		r1 = rf(tx, actor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_AddActor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddActor'
type AccountRepository_AddActor_Call struct {
	*mock.Call
}

// AddActor is a helper method to define mock.On call
//   - tx *sql.Tx
//   - actor entity.Actor
func (_e *AccountRepository_Expecter) AddActor(tx interface{}, actor interface{}) *AccountRepository_AddActor_Call {
	return &AccountRepository_AddActor_Call{Call: _e.mock.On("AddActor", tx, actor)}
}

func (_c *AccountRepository_AddActor_Call) Run(run func(tx *sql.Tx, actor entity.Actor)) *AccountRepository_AddActor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Tx), args[1].(entity.Actor))
	})
	return _c
}

func (_c *AccountRepository_AddActor_Call) Return(_a0 int64, _a1 error) *AccountRepository_AddActor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_AddActor_Call) RunAndReturn(run func(*sql.Tx, entity.Actor) (int64, error)) *AccountRepository_AddActor_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAdminByID provides a mock function with given fields: tx, actor
func (_m *AccountRepository) DeleteAdminByID(tx *sql.Tx, actor entity.Actor) (int64, error) {
	ret := _m.Called(tx, actor)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.Actor) (int64, error)); ok {
		return rf(tx, actor)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.Actor) int64); ok {
		r0 = rf(tx, actor)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, entity.Actor) error); ok {
		r1 = rf(tx, actor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_DeleteAdminByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAdminByID'
type AccountRepository_DeleteAdminByID_Call struct {
	*mock.Call
}

// DeleteAdminByID is a helper method to define mock.On call
//   - tx *sql.Tx
//   - actor entity.Actor
func (_e *AccountRepository_Expecter) DeleteAdminByID(tx interface{}, actor interface{}) *AccountRepository_DeleteAdminByID_Call {
	return &AccountRepository_DeleteAdminByID_Call{Call: _e.mock.On("DeleteAdminByID", tx, actor)}
}

func (_c *AccountRepository_DeleteAdminByID_Call) Run(run func(tx *sql.Tx, actor entity.Actor)) *AccountRepository_DeleteAdminByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Tx), args[1].(entity.Actor))
	})
	return _c
}

func (_c *AccountRepository_DeleteAdminByID_Call) Return(_a0 int64, _a1 error) *AccountRepository_DeleteAdminByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_DeleteAdminByID_Call) RunAndReturn(run func(*sql.Tx, entity.Actor) (int64, error)) *AccountRepository_DeleteAdminByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAdmin provides a mock function with given fields: tx, actor, et
func (_m *AccountRepository) GetAllAdmin(tx *sql.DB, actor entity.Actor, et entity.Pagination) ([]entity.Actor, error) {
	ret := _m.Called(tx, actor, et)

	var r0 []entity.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.DB, entity.Actor, entity.Pagination) ([]entity.Actor, error)); ok {
		return rf(tx, actor, et)
	}
	if rf, ok := ret.Get(0).(func(*sql.DB, entity.Actor, entity.Pagination) []entity.Actor); ok {
		r0 = rf(tx, actor, et)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.DB, entity.Actor, entity.Pagination) error); ok {
		r1 = rf(tx, actor, et)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_GetAllAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAdmin'
type AccountRepository_GetAllAdmin_Call struct {
	*mock.Call
}

// GetAllAdmin is a helper method to define mock.On call
//   - tx *sql.DB
//   - actor entity.Actor
//   - et entity.Pagination
func (_e *AccountRepository_Expecter) GetAllAdmin(tx interface{}, actor interface{}, et interface{}) *AccountRepository_GetAllAdmin_Call {
	return &AccountRepository_GetAllAdmin_Call{Call: _e.mock.On("GetAllAdmin", tx, actor, et)}
}

func (_c *AccountRepository_GetAllAdmin_Call) Run(run func(tx *sql.DB, actor entity.Actor, et entity.Pagination)) *AccountRepository_GetAllAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.DB), args[1].(entity.Actor), args[2].(entity.Pagination))
	})
	return _c
}

func (_c *AccountRepository_GetAllAdmin_Call) Return(_a0 []entity.Actor, _a1 error) *AccountRepository_GetAllAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_GetAllAdmin_Call) RunAndReturn(run func(*sql.DB, entity.Actor, entity.Pagination) ([]entity.Actor, error)) *AccountRepository_GetAllAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllApprovalAdmin provides a mock function with given fields: tx
func (_m *AccountRepository) GetAllApprovalAdmin(tx *sql.Tx) ([]entity.AdminReg, error) {
	ret := _m.Called(tx)

	var r0 []entity.AdminReg
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) ([]entity.AdminReg, error)); ok {
		return rf(tx)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx) []entity.AdminReg); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.AdminReg)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_GetAllApprovalAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllApprovalAdmin'
type AccountRepository_GetAllApprovalAdmin_Call struct {
	*mock.Call
}

// GetAllApprovalAdmin is a helper method to define mock.On call
//   - tx *sql.Tx
func (_e *AccountRepository_Expecter) GetAllApprovalAdmin(tx interface{}) *AccountRepository_GetAllApprovalAdmin_Call {
	return &AccountRepository_GetAllApprovalAdmin_Call{Call: _e.mock.On("GetAllApprovalAdmin", tx)}
}

func (_c *AccountRepository_GetAllApprovalAdmin_Call) Run(run func(tx *sql.Tx)) *AccountRepository_GetAllApprovalAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Tx))
	})
	return _c
}

func (_c *AccountRepository_GetAllApprovalAdmin_Call) Return(_a0 []entity.AdminReg, _a1 error) *AccountRepository_GetAllApprovalAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_GetAllApprovalAdmin_Call) RunAndReturn(run func(*sql.Tx) ([]entity.AdminReg, error)) *AccountRepository_GetAllApprovalAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: tx, token
func (_m *AccountRepository) Login(tx *sql.Tx, token entity.Token) (string, error) {
	ret := _m.Called(tx, token)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.Token) (string, error)); ok {
		return rf(tx, token)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.Token) string); ok {
		r0 = rf(tx, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, entity.Token) error); ok {
		r1 = rf(tx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AccountRepository_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - tx *sql.Tx
//   - token entity.Token
func (_e *AccountRepository_Expecter) Login(tx interface{}, token interface{}) *AccountRepository_Login_Call {
	return &AccountRepository_Login_Call{Call: _e.mock.On("Login", tx, token)}
}

func (_c *AccountRepository_Login_Call) Run(run func(tx *sql.Tx, token entity.Token)) *AccountRepository_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Tx), args[1].(entity.Token))
	})
	return _c
}

func (_c *AccountRepository_Login_Call) Return(_a0 string, _a1 error) *AccountRepository_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_Login_Call) RunAndReturn(run func(*sql.Tx, entity.Token) (string, error)) *AccountRepository_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Pagination provides a mock function with given fields: tx, et
func (_m *AccountRepository) Pagination(tx *sql.DB, et entity.Pagination) (entity.Pagination, error) {
	ret := _m.Called(tx, et)

	var r0 entity.Pagination
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.DB, entity.Pagination) (entity.Pagination, error)); ok {
		return rf(tx, et)
	}
	if rf, ok := ret.Get(0).(func(*sql.DB, entity.Pagination) entity.Pagination); ok {
		r0 = rf(tx, et)
	} else {
		r0 = ret.Get(0).(entity.Pagination)
	}

	if rf, ok := ret.Get(1).(func(*sql.DB, entity.Pagination) error); ok {
		r1 = rf(tx, et)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_Pagination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pagination'
type AccountRepository_Pagination_Call struct {
	*mock.Call
}

// Pagination is a helper method to define mock.On call
//   - tx *sql.DB
//   - et entity.Pagination
func (_e *AccountRepository_Expecter) Pagination(tx interface{}, et interface{}) *AccountRepository_Pagination_Call {
	return &AccountRepository_Pagination_Call{Call: _e.mock.On("Pagination", tx, et)}
}

func (_c *AccountRepository_Pagination_Call) Run(run func(tx *sql.DB, et entity.Pagination)) *AccountRepository_Pagination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.DB), args[1].(entity.Pagination))
	})
	return _c
}

func (_c *AccountRepository_Pagination_Call) Return(_a0 entity.Pagination, _a1 error) *AccountRepository_Pagination_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_Pagination_Call) RunAndReturn(run func(*sql.DB, entity.Pagination) (entity.Pagination, error)) *AccountRepository_Pagination_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAdmin provides a mock function with given fields: tx, adminReg
func (_m *AccountRepository) RegisterAdmin(tx *sql.Tx, adminReg entity.AdminReg) (int64, error) {
	ret := _m.Called(tx, adminReg)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.AdminReg) (int64, error)); ok {
		return rf(tx, adminReg)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.AdminReg) int64); ok {
		r0 = rf(tx, adminReg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, entity.AdminReg) error); ok {
		r1 = rf(tx, adminReg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_RegisterAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAdmin'
type AccountRepository_RegisterAdmin_Call struct {
	*mock.Call
}

// RegisterAdmin is a helper method to define mock.On call
//   - tx *sql.Tx
//   - adminReg entity.AdminReg
func (_e *AccountRepository_Expecter) RegisterAdmin(tx interface{}, adminReg interface{}) *AccountRepository_RegisterAdmin_Call {
	return &AccountRepository_RegisterAdmin_Call{Call: _e.mock.On("RegisterAdmin", tx, adminReg)}
}

func (_c *AccountRepository_RegisterAdmin_Call) Run(run func(tx *sql.Tx, adminReg entity.AdminReg)) *AccountRepository_RegisterAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Tx), args[1].(entity.AdminReg))
	})
	return _c
}

func (_c *AccountRepository_RegisterAdmin_Call) Return(_a0 int64, _a1 error) *AccountRepository_RegisterAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_RegisterAdmin_Call) RunAndReturn(run func(*sql.Tx, entity.AdminReg) (int64, error)) *AccountRepository_RegisterAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAdminRegStatusByAdminID provides a mock function with given fields: tx, adminReg
func (_m *AccountRepository) UpdateAdminRegStatusByAdminID(tx *sql.Tx, adminReg entity.AdminReg) (int64, error) {
	ret := _m.Called(tx, adminReg)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.AdminReg) (int64, error)); ok {
		return rf(tx, adminReg)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.AdminReg) int64); ok {
		r0 = rf(tx, adminReg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, entity.AdminReg) error); ok {
		r1 = rf(tx, adminReg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_UpdateAdminRegStatusByAdminID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAdminRegStatusByAdminID'
type AccountRepository_UpdateAdminRegStatusByAdminID_Call struct {
	*mock.Call
}

// UpdateAdminRegStatusByAdminID is a helper method to define mock.On call
//   - tx *sql.Tx
//   - adminReg entity.AdminReg
func (_e *AccountRepository_Expecter) UpdateAdminRegStatusByAdminID(tx interface{}, adminReg interface{}) *AccountRepository_UpdateAdminRegStatusByAdminID_Call {
	return &AccountRepository_UpdateAdminRegStatusByAdminID_Call{Call: _e.mock.On("UpdateAdminRegStatusByAdminID", tx, adminReg)}
}

func (_c *AccountRepository_UpdateAdminRegStatusByAdminID_Call) Run(run func(tx *sql.Tx, adminReg entity.AdminReg)) *AccountRepository_UpdateAdminRegStatusByAdminID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Tx), args[1].(entity.AdminReg))
	})
	return _c
}

func (_c *AccountRepository_UpdateAdminRegStatusByAdminID_Call) Return(_a0 int64, _a1 error) *AccountRepository_UpdateAdminRegStatusByAdminID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_UpdateAdminRegStatusByAdminID_Call) RunAndReturn(run func(*sql.Tx, entity.AdminReg) (int64, error)) *AccountRepository_UpdateAdminRegStatusByAdminID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAdminStatusByAdminID provides a mock function with given fields: tx, actor
func (_m *AccountRepository) UpdateAdminStatusByAdminID(tx *sql.Tx, actor entity.Actor) (int64, error) {
	ret := _m.Called(tx, actor)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.Actor) (int64, error)); ok {
		return rf(tx, actor)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.Actor) int64); ok {
		r0 = rf(tx, actor)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, entity.Actor) error); ok {
		r1 = rf(tx, actor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_UpdateAdminStatusByAdminID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAdminStatusByAdminID'
type AccountRepository_UpdateAdminStatusByAdminID_Call struct {
	*mock.Call
}

// UpdateAdminStatusByAdminID is a helper method to define mock.On call
//   - tx *sql.Tx
//   - actor entity.Actor
func (_e *AccountRepository_Expecter) UpdateAdminStatusByAdminID(tx interface{}, actor interface{}) *AccountRepository_UpdateAdminStatusByAdminID_Call {
	return &AccountRepository_UpdateAdminStatusByAdminID_Call{Call: _e.mock.On("UpdateAdminStatusByAdminID", tx, actor)}
}

func (_c *AccountRepository_UpdateAdminStatusByAdminID_Call) Run(run func(tx *sql.Tx, actor entity.Actor)) *AccountRepository_UpdateAdminStatusByAdminID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Tx), args[1].(entity.Actor))
	})
	return _c
}

func (_c *AccountRepository_UpdateAdminStatusByAdminID_Call) Return(_a0 int64, _a1 error) *AccountRepository_UpdateAdminStatusByAdminID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_UpdateAdminStatusByAdminID_Call) RunAndReturn(run func(*sql.Tx, entity.Actor) (int64, error)) *AccountRepository_UpdateAdminStatusByAdminID_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyActorCredential provides a mock function with given fields: tx, actor
func (_m *AccountRepository) VerifyActorCredential(tx *sql.Tx, actor entity.Actor) (entity.Actor, error) {
	ret := _m.Called(tx, actor)

	var r0 entity.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.Actor) (entity.Actor, error)); ok {
		return rf(tx, actor)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, entity.Actor) entity.Actor); ok {
		r0 = rf(tx, actor)
	} else {
		r0 = ret.Get(0).(entity.Actor)
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, entity.Actor) error); ok {
		r1 = rf(tx, actor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_VerifyActorCredential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyActorCredential'
type AccountRepository_VerifyActorCredential_Call struct {
	*mock.Call
}

// VerifyActorCredential is a helper method to define mock.On call
//   - tx *sql.Tx
//   - actor entity.Actor
func (_e *AccountRepository_Expecter) VerifyActorCredential(tx interface{}, actor interface{}) *AccountRepository_VerifyActorCredential_Call {
	return &AccountRepository_VerifyActorCredential_Call{Call: _e.mock.On("VerifyActorCredential", tx, actor)}
}

func (_c *AccountRepository_VerifyActorCredential_Call) Run(run func(tx *sql.Tx, actor entity.Actor)) *AccountRepository_VerifyActorCredential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Tx), args[1].(entity.Actor))
	})
	return _c
}

func (_c *AccountRepository_VerifyActorCredential_Call) Return(_a0 entity.Actor, _a1 error) *AccountRepository_VerifyActorCredential_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_VerifyActorCredential_Call) RunAndReturn(run func(*sql.Tx, entity.Actor) (entity.Actor, error)) *AccountRepository_VerifyActorCredential_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAccountRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccountRepository creates a new instance of AccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountRepository(t mockConstructorTestingTNewAccountRepository) *AccountRepository {
	mock := &AccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
