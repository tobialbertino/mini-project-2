// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "miniProject2/modules/account/model/domain"

	mock "github.com/stretchr/testify/mock"
)

// AccountUseCase is an autogenerated mock type for the AccountUseCase type
type AccountUseCase struct {
	mock.Mock
}

type AccountUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountUseCase) EXPECT() *AccountUseCase_Expecter {
	return &AccountUseCase_Expecter{mock: &_m.Mock}
}

// AddActor provides a mock function with given fields: req
func (_m *AccountUseCase) AddActor(req domain.Actor) (int64, error) {
	ret := _m.Called(req)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Actor) (int64, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(domain.Actor) int64); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(domain.Actor) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountUseCase_AddActor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddActor'
type AccountUseCase_AddActor_Call struct {
	*mock.Call
}

// AddActor is a helper method to define mock.On call
//   - req domain.Actor
func (_e *AccountUseCase_Expecter) AddActor(req interface{}) *AccountUseCase_AddActor_Call {
	return &AccountUseCase_AddActor_Call{Call: _e.mock.On("AddActor", req)}
}

func (_c *AccountUseCase_AddActor_Call) Run(run func(req domain.Actor)) *AccountUseCase_AddActor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Actor))
	})
	return _c
}

func (_c *AccountUseCase_AddActor_Call) Return(_a0 int64, _a1 error) *AccountUseCase_AddActor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountUseCase_AddActor_Call) RunAndReturn(run func(domain.Actor) (int64, error)) *AccountUseCase_AddActor_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAdminByID provides a mock function with given fields: req
func (_m *AccountUseCase) DeleteAdminByID(req domain.Actor) (int64, error) {
	ret := _m.Called(req)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Actor) (int64, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(domain.Actor) int64); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(domain.Actor) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountUseCase_DeleteAdminByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAdminByID'
type AccountUseCase_DeleteAdminByID_Call struct {
	*mock.Call
}

// DeleteAdminByID is a helper method to define mock.On call
//   - req domain.Actor
func (_e *AccountUseCase_Expecter) DeleteAdminByID(req interface{}) *AccountUseCase_DeleteAdminByID_Call {
	return &AccountUseCase_DeleteAdminByID_Call{Call: _e.mock.On("DeleteAdminByID", req)}
}

func (_c *AccountUseCase_DeleteAdminByID_Call) Run(run func(req domain.Actor)) *AccountUseCase_DeleteAdminByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Actor))
	})
	return _c
}

func (_c *AccountUseCase_DeleteAdminByID_Call) Return(_a0 int64, _a1 error) *AccountUseCase_DeleteAdminByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountUseCase_DeleteAdminByID_Call) RunAndReturn(run func(domain.Actor) (int64, error)) *AccountUseCase_DeleteAdminByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAdmin provides a mock function with given fields: req, pagi
func (_m *AccountUseCase) GetAllAdmin(req domain.Actor, pagi domain.Pagination) (domain.ListActorWithPaging, error) {
	ret := _m.Called(req, pagi)

	var r0 domain.ListActorWithPaging
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Actor, domain.Pagination) (domain.ListActorWithPaging, error)); ok {
		return rf(req, pagi)
	}
	if rf, ok := ret.Get(0).(func(domain.Actor, domain.Pagination) domain.ListActorWithPaging); ok {
		r0 = rf(req, pagi)
	} else {
		r0 = ret.Get(0).(domain.ListActorWithPaging)
	}

	if rf, ok := ret.Get(1).(func(domain.Actor, domain.Pagination) error); ok {
		r1 = rf(req, pagi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountUseCase_GetAllAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAdmin'
type AccountUseCase_GetAllAdmin_Call struct {
	*mock.Call
}

// GetAllAdmin is a helper method to define mock.On call
//   - req domain.Actor
//   - pagi domain.Pagination
func (_e *AccountUseCase_Expecter) GetAllAdmin(req interface{}, pagi interface{}) *AccountUseCase_GetAllAdmin_Call {
	return &AccountUseCase_GetAllAdmin_Call{Call: _e.mock.On("GetAllAdmin", req, pagi)}
}

func (_c *AccountUseCase_GetAllAdmin_Call) Run(run func(req domain.Actor, pagi domain.Pagination)) *AccountUseCase_GetAllAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Actor), args[1].(domain.Pagination))
	})
	return _c
}

func (_c *AccountUseCase_GetAllAdmin_Call) Return(_a0 domain.ListActorWithPaging, _a1 error) *AccountUseCase_GetAllAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountUseCase_GetAllAdmin_Call) RunAndReturn(run func(domain.Actor, domain.Pagination) (domain.ListActorWithPaging, error)) *AccountUseCase_GetAllAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllApprovalAdmin provides a mock function with given fields:
func (_m *AccountUseCase) GetAllApprovalAdmin() ([]domain.AdminReg, error) {
	ret := _m.Called()

	var r0 []domain.AdminReg
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.AdminReg, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.AdminReg); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.AdminReg)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountUseCase_GetAllApprovalAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllApprovalAdmin'
type AccountUseCase_GetAllApprovalAdmin_Call struct {
	*mock.Call
}

// GetAllApprovalAdmin is a helper method to define mock.On call
func (_e *AccountUseCase_Expecter) GetAllApprovalAdmin() *AccountUseCase_GetAllApprovalAdmin_Call {
	return &AccountUseCase_GetAllApprovalAdmin_Call{Call: _e.mock.On("GetAllApprovalAdmin")}
}

func (_c *AccountUseCase_GetAllApprovalAdmin_Call) Run(run func()) *AccountUseCase_GetAllApprovalAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AccountUseCase_GetAllApprovalAdmin_Call) Return(_a0 []domain.AdminReg, _a1 error) *AccountUseCase_GetAllApprovalAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountUseCase_GetAllApprovalAdmin_Call) RunAndReturn(run func() ([]domain.AdminReg, error)) *AccountUseCase_GetAllApprovalAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAdminStatusByID provides a mock function with given fields: reqReg, reqActor
func (_m *AccountUseCase) UpdateAdminStatusByID(reqReg domain.AdminReg, reqActor domain.Actor) (int64, error) {
	ret := _m.Called(reqReg, reqActor)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.AdminReg, domain.Actor) (int64, error)); ok {
		return rf(reqReg, reqActor)
	}
	if rf, ok := ret.Get(0).(func(domain.AdminReg, domain.Actor) int64); ok {
		r0 = rf(reqReg, reqActor)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(domain.AdminReg, domain.Actor) error); ok {
		r1 = rf(reqReg, reqActor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountUseCase_UpdateAdminStatusByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAdminStatusByID'
type AccountUseCase_UpdateAdminStatusByID_Call struct {
	*mock.Call
}

// UpdateAdminStatusByID is a helper method to define mock.On call
//   - reqReg domain.AdminReg
//   - reqActor domain.Actor
func (_e *AccountUseCase_Expecter) UpdateAdminStatusByID(reqReg interface{}, reqActor interface{}) *AccountUseCase_UpdateAdminStatusByID_Call {
	return &AccountUseCase_UpdateAdminStatusByID_Call{Call: _e.mock.On("UpdateAdminStatusByID", reqReg, reqActor)}
}

func (_c *AccountUseCase_UpdateAdminStatusByID_Call) Run(run func(reqReg domain.AdminReg, reqActor domain.Actor)) *AccountUseCase_UpdateAdminStatusByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.AdminReg), args[1].(domain.Actor))
	})
	return _c
}

func (_c *AccountUseCase_UpdateAdminStatusByID_Call) Return(_a0 int64, _a1 error) *AccountUseCase_UpdateAdminStatusByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountUseCase_UpdateAdminStatusByID_Call) RunAndReturn(run func(domain.AdminReg, domain.Actor) (int64, error)) *AccountUseCase_UpdateAdminStatusByID_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyActorCredential provides a mock function with given fields: req
func (_m *AccountUseCase) VerifyActorCredential(req domain.Actor) (domain.ResToken, error) {
	ret := _m.Called(req)

	var r0 domain.ResToken
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Actor) (domain.ResToken, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(domain.Actor) domain.ResToken); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(domain.ResToken)
	}

	if rf, ok := ret.Get(1).(func(domain.Actor) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountUseCase_VerifyActorCredential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyActorCredential'
type AccountUseCase_VerifyActorCredential_Call struct {
	*mock.Call
}

// VerifyActorCredential is a helper method to define mock.On call
//   - req domain.Actor
func (_e *AccountUseCase_Expecter) VerifyActorCredential(req interface{}) *AccountUseCase_VerifyActorCredential_Call {
	return &AccountUseCase_VerifyActorCredential_Call{Call: _e.mock.On("VerifyActorCredential", req)}
}

func (_c *AccountUseCase_VerifyActorCredential_Call) Run(run func(req domain.Actor)) *AccountUseCase_VerifyActorCredential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Actor))
	})
	return _c
}

func (_c *AccountUseCase_VerifyActorCredential_Call) Return(_a0 domain.ResToken, _a1 error) *AccountUseCase_VerifyActorCredential_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountUseCase_VerifyActorCredential_Call) RunAndReturn(run func(domain.Actor) (domain.ResToken, error)) *AccountUseCase_VerifyActorCredential_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAccountUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccountUseCase creates a new instance of AccountUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountUseCase(t mockConstructorTestingTNewAccountUseCase) *AccountUseCase {
	mock := &AccountUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
