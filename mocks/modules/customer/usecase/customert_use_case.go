// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "miniProject2/modules/customer/model/domain"

	mock "github.com/stretchr/testify/mock"
)

// CustomertUseCase is an autogenerated mock type for the CustomertUseCase type
type CustomertUseCase struct {
	mock.Mock
}

type CustomertUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *CustomertUseCase) EXPECT() *CustomertUseCase_Expecter {
	return &CustomertUseCase_Expecter{mock: &_m.Mock}
}

// CreateCustomer provides a mock function with given fields: dt
func (_m *CustomertUseCase) CreateCustomer(dt domain.Customer) (int64, error) {
	ret := _m.Called(dt)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Customer) (int64, error)); ok {
		return rf(dt)
	}
	if rf, ok := ret.Get(0).(func(domain.Customer) int64); ok {
		r0 = rf(dt)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(domain.Customer) error); ok {
		r1 = rf(dt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomertUseCase_CreateCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomer'
type CustomertUseCase_CreateCustomer_Call struct {
	*mock.Call
}

// CreateCustomer is a helper method to define mock.On call
//   - dt domain.Customer
func (_e *CustomertUseCase_Expecter) CreateCustomer(dt interface{}) *CustomertUseCase_CreateCustomer_Call {
	return &CustomertUseCase_CreateCustomer_Call{Call: _e.mock.On("CreateCustomer", dt)}
}

func (_c *CustomertUseCase_CreateCustomer_Call) Run(run func(dt domain.Customer)) *CustomertUseCase_CreateCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Customer))
	})
	return _c
}

func (_c *CustomertUseCase_CreateCustomer_Call) Return(_a0 int64, _a1 error) *CustomertUseCase_CreateCustomer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomertUseCase_CreateCustomer_Call) RunAndReturn(run func(domain.Customer) (int64, error)) *CustomertUseCase_CreateCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCustomerByID provides a mock function with given fields: dt
func (_m *CustomertUseCase) DeleteCustomerByID(dt domain.Customer) (int64, error) {
	ret := _m.Called(dt)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Customer) (int64, error)); ok {
		return rf(dt)
	}
	if rf, ok := ret.Get(0).(func(domain.Customer) int64); ok {
		r0 = rf(dt)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(domain.Customer) error); ok {
		r1 = rf(dt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomertUseCase_DeleteCustomerByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomerByID'
type CustomertUseCase_DeleteCustomerByID_Call struct {
	*mock.Call
}

// DeleteCustomerByID is a helper method to define mock.On call
//   - dt domain.Customer
func (_e *CustomertUseCase_Expecter) DeleteCustomerByID(dt interface{}) *CustomertUseCase_DeleteCustomerByID_Call {
	return &CustomertUseCase_DeleteCustomerByID_Call{Call: _e.mock.On("DeleteCustomerByID", dt)}
}

func (_c *CustomertUseCase_DeleteCustomerByID_Call) Run(run func(dt domain.Customer)) *CustomertUseCase_DeleteCustomerByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Customer))
	})
	return _c
}

func (_c *CustomertUseCase_DeleteCustomerByID_Call) Return(_a0 int64, _a1 error) *CustomertUseCase_DeleteCustomerByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomertUseCase_DeleteCustomerByID_Call) RunAndReturn(run func(domain.Customer) (int64, error)) *CustomertUseCase_DeleteCustomerByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCustomer provides a mock function with given fields: dt, pagi
func (_m *CustomertUseCase) GetAllCustomer(dt domain.Customer, pagi domain.Pagination) (domain.ListActorWithPaging, error) {
	ret := _m.Called(dt, pagi)

	var r0 domain.ListActorWithPaging
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Customer, domain.Pagination) (domain.ListActorWithPaging, error)); ok {
		return rf(dt, pagi)
	}
	if rf, ok := ret.Get(0).(func(domain.Customer, domain.Pagination) domain.ListActorWithPaging); ok {
		r0 = rf(dt, pagi)
	} else {
		r0 = ret.Get(0).(domain.ListActorWithPaging)
	}

	if rf, ok := ret.Get(1).(func(domain.Customer, domain.Pagination) error); ok {
		r1 = rf(dt, pagi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomertUseCase_GetAllCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCustomer'
type CustomertUseCase_GetAllCustomer_Call struct {
	*mock.Call
}

// GetAllCustomer is a helper method to define mock.On call
//   - dt domain.Customer
//   - pagi domain.Pagination
func (_e *CustomertUseCase_Expecter) GetAllCustomer(dt interface{}, pagi interface{}) *CustomertUseCase_GetAllCustomer_Call {
	return &CustomertUseCase_GetAllCustomer_Call{Call: _e.mock.On("GetAllCustomer", dt, pagi)}
}

func (_c *CustomertUseCase_GetAllCustomer_Call) Run(run func(dt domain.Customer, pagi domain.Pagination)) *CustomertUseCase_GetAllCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Customer), args[1].(domain.Pagination))
	})
	return _c
}

func (_c *CustomertUseCase_GetAllCustomer_Call) Return(_a0 domain.ListActorWithPaging, _a1 error) *CustomertUseCase_GetAllCustomer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomertUseCase_GetAllCustomer_Call) RunAndReturn(run func(domain.Customer, domain.Pagination) (domain.ListActorWithPaging, error)) *CustomertUseCase_GetAllCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomerByID provides a mock function with given fields: dt
func (_m *CustomertUseCase) GetCustomerByID(dt domain.Customer) (domain.Customer, error) {
	ret := _m.Called(dt)

	var r0 domain.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Customer) (domain.Customer, error)); ok {
		return rf(dt)
	}
	if rf, ok := ret.Get(0).(func(domain.Customer) domain.Customer); ok {
		r0 = rf(dt)
	} else {
		r0 = ret.Get(0).(domain.Customer)
	}

	if rf, ok := ret.Get(1).(func(domain.Customer) error); ok {
		r1 = rf(dt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomertUseCase_GetCustomerByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomerByID'
type CustomertUseCase_GetCustomerByID_Call struct {
	*mock.Call
}

// GetCustomerByID is a helper method to define mock.On call
//   - dt domain.Customer
func (_e *CustomertUseCase_Expecter) GetCustomerByID(dt interface{}) *CustomertUseCase_GetCustomerByID_Call {
	return &CustomertUseCase_GetCustomerByID_Call{Call: _e.mock.On("GetCustomerByID", dt)}
}

func (_c *CustomertUseCase_GetCustomerByID_Call) Run(run func(dt domain.Customer)) *CustomertUseCase_GetCustomerByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Customer))
	})
	return _c
}

func (_c *CustomertUseCase_GetCustomerByID_Call) Return(_a0 domain.Customer, _a1 error) *CustomertUseCase_GetCustomerByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomertUseCase_GetCustomerByID_Call) RunAndReturn(run func(domain.Customer) (domain.Customer, error)) *CustomertUseCase_GetCustomerByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCustomerByID provides a mock function with given fields: dt
func (_m *CustomertUseCase) UpdateCustomerByID(dt domain.Customer) (int64, error) {
	ret := _m.Called(dt)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Customer) (int64, error)); ok {
		return rf(dt)
	}
	if rf, ok := ret.Get(0).(func(domain.Customer) int64); ok {
		r0 = rf(dt)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(domain.Customer) error); ok {
		r1 = rf(dt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomertUseCase_UpdateCustomerByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCustomerByID'
type CustomertUseCase_UpdateCustomerByID_Call struct {
	*mock.Call
}

// UpdateCustomerByID is a helper method to define mock.On call
//   - dt domain.Customer
func (_e *CustomertUseCase_Expecter) UpdateCustomerByID(dt interface{}) *CustomertUseCase_UpdateCustomerByID_Call {
	return &CustomertUseCase_UpdateCustomerByID_Call{Call: _e.mock.On("UpdateCustomerByID", dt)}
}

func (_c *CustomertUseCase_UpdateCustomerByID_Call) Run(run func(dt domain.Customer)) *CustomertUseCase_UpdateCustomerByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Customer))
	})
	return _c
}

func (_c *CustomertUseCase_UpdateCustomerByID_Call) Return(_a0 int64, _a1 error) *CustomertUseCase_UpdateCustomerByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomertUseCase_UpdateCustomerByID_Call) RunAndReturn(run func(domain.Customer) (int64, error)) *CustomertUseCase_UpdateCustomerByID_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCustomertUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustomertUseCase creates a new instance of CustomertUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomertUseCase(t mockConstructorTestingTNewCustomertUseCase) *CustomertUseCase {
	mock := &CustomertUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
